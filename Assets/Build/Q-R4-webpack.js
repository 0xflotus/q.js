!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){n(1),n(2),n(3),n(4),n(5),t.exports=n(6)},function(t,e){const n=function(t){return n.Circuit.fromText(t)};Object.assign(n,{verbosity:.5,animals:[],colors:[],animals3:["ape","bee","cat","dog","elk","fox","gup","hen"],warn:function(){return console.warn(...arguments),"(warning)"},error:function(){return console.error(...arguments),"(error)"},extractDocumentation:function(t){const e=(t=t.toString()).indexOf("`")+1,n=t.indexOf("`",e),r=t.substring(e,n).split("\n");let i=Number.MAX_SAFE_INTEGER;return r.forEach(function(t){if(t){const e=function(t){let e=index=0;for(;"\t"===t.charAt(index++);)e++;return e}(t);i>e&&(i=e)}}),r.forEach(function(t,e){""===t.trim()&&(t="\n\n"),r[e]=t.substring(i).replace(/ {2}$/,"\n")}),r.join("")},help:function(t){return void 0===t&&(t=n),n.extractDocumentation(t)},constants:{},createConstant:function(t,e){this[t]=e,this.constants[t]=this[t],Object.freeze(this[t])},createConstants:function(){if(arguments.length%2!=0)return n.error("Q attempted to create constants with invalid (KEY, VALUE) pairs.");for(let t=0;t<arguments.length;t+=2)this.createConstant(arguments[t],arguments[t+1])},loop:function(){},hypotenuse:function(t,e){let n=Math.abs(t),r=Math.abs(e);return n<2048&&r<2048?Math.sqrt(n*n+r*r):(n<r?(n=r,r=t/e):r=e/t,n*Math.sqrt(1+r*r))},logHypotenuse:function(t,e){const n=Math.abs(t),r=Math.abs(e);return 0===t?Math.log(r):0===e?Math.log(n):n<2048&&r<2048?Math.log(t*t+e*e)/2:Math.log(t/Math.cos(Math.atan2(e,t)))},hyperbolicSine:function(t){return(Math.exp(t)-Math.exp(-t))/2},hyperbolicCosine:function(t){return(Math.exp(t)+Math.exp(-t))/2},round:function(t,e){"number"!=typeof e&&(e=0);const n=Math.pow(10,e);return Math.round(t*n)/n},toTitleCase:t=>(t=t.replace(/_/g," ")).toLowerCase().split(" ").map(function(t){return t.replace(t[0],t[0].toUpperCase())}).join(" ")}),n.createConstants("REVISION",4,"EPSILON",6*Number.EPSILON,"RADIANS_TO_DEGREES",180/Math.PI),console.log(`\n\n\n  QQQQQQ\nQQ      QQ\nQQ      QQ\nQQ      QQ\nQQ  QQ  QQ\nQQ    QQ \n  QQQQ  R${n.REVISION}    \n\n\n\nQ.help() for more information.\n\n\n`)},function(t,e){Q.ComplexNumber=function(t,e){if(t instanceof Q.ComplexNumber?(e=t.imaginary,t=t.real,Q.warn("Q.ComplexNumber tried to create a new instance with an argument that is already a Q.ComplexNumber — and that’s weird!")):void 0===t&&(t=0),void 0===e&&(e=0),!0!==Q.ComplexNumber.isNumberLike(t)||!0!==Q.ComplexNumber.isNumberLike(e))return Q.error("Q.ComplexNumber attempted to create a new instance but the arguments provided were not actual numbers.");this.real=t,this.imaginary=e,this.index=Q.ComplexNumber.index++},Object.assign(Q.ComplexNumber,{index:0,help:function(){return Q.help(this)},constants:{},createConstant:Q.createConstant,createConstants:Q.createConstants,isNumberLike:function(t){return"number"==typeof t||t instanceof Number},isNaN:function(t){return isNaN(t.real)||isNaN(t.imaginary)},isZero:function(t){return!(0!==t.real&&-0!==t.real||0!==t.imaginary&&-0!==t.imaginary)},isFinite:function(t){return isFinite(t.real)&&isFinite(t.imaginary)},isInfinite:function(t){return!(this.isNaN(t)||this.isFinite(t))},areEqual:function(t,e){return Q.ComplexNumber.operate("areEqual",t,e,function(t,e){return Math.abs(t-e)<Q.EPSILON},function(t,e){return Math.abs(t-e.real)<Q.EPSILON&&Math.abs(e.imaginary)<Q.EPSILON},function(t,e){return Math.abs(t.real-e)<Q.EPSILON&&Math.abs(t.imaginary)<Q.EPSILON},function(t,e){return Math.abs(t.real-e.real)<Q.EPSILON&&Math.abs(t.imaginary-e.imaginary)<Q.EPSILON})},absolute:function(t){return Q.hypotenuse(t.real,t.imaginary)},conjugate:function(t){return new Q.ComplexNumber(t.real,-1*t.imaginary)},operate:function(t,e,n,r,i,o,a){return Q.ComplexNumber.isNumberLike(e)?Q.ComplexNumber.isNumberLike(n)?r(e,n):n instanceof Q.ComplexNumber?i(e,n):Q.error("Q.ComplexNumber attempted to",t,"with the number",e,"and something that is neither a Number or Q.ComplexNumber:",n):e instanceof Q.ComplexNumber?Q.ComplexNumber.isNumberLike(n)?o(e,n):n instanceof Q.ComplexNumber?a(e,n):Q.error("Q.ComplexNumber attempted to",t,"with the complex number",e,"and something that is neither a Number or Q.ComplexNumber:",n):Q.error("Q.ComplexNumber attempted to",t,"with something that is neither a Number or Q.ComplexNumber:",e)},sine:function(t){const e=t.real,n=t.imaginary;return new Q.ComplexNumber(Math.sin(e)*Q.hyperbolicCosine(n),Math.cos(e)*Q.hyperbolicSine(n))},cosine:function(t){const e=t.real,n=t.imaginary;return new Q.ComplexNumber(Math.cos(e)*Q.hyperbolicCosine(n),-Math.sin(e)*Q.hyperbolicSine(n))},arcCosine:function(t){const e=t.real,n=t.imaginary,r=Q.ComplexNumber.squareRoot(new Q.ComplexNumber(n*n-e*e+1,e*n*-2)),i=Q.ComplexNumber.log(new Q.ComplexNumber(r.real-n,r.imaginary+e));return new Q.ComplexNumber(Math.PI/2-i.imaginary,i.real)},arcTangent:function(t){const e=t.real,n=t.imaginary;if(0===e){if(1===n)return new Q.ComplexNumber(0,1/0);if(-1===n)return new Q.ComplexNumber(0,-1/0)}const r=e*e+(1-n)*(1-n),i=Q.ComplexNumber.log(new Q.ComplexNumber((1-n*n-e*e)/r,e/r*-2));return new Q.ComplexNumber(i.imaginary/2,i.real/2)},power:function(t,e){if(Q.ComplexNumber.isNumberLike(t)&&(t=new Q.ComplexNumber(t)),Q.ComplexNumber.isNumberLike(e)&&(e=new Q.ComplexNumber(e)),e.isZero())return Q.ComplexNumber.ONE;if(t.isZero()&&e.real>0&&e.imaginary>=0)return Q.ComplexNumber.ZERO;if(0===e.imaginary){if(t.real>=0&&0===t.imaginary)return new Q.ComplexNumber(Math.pow(t.real,e.real),0);if(0===t.real)switch((e.real%4+4)%4){case 0:return new Q.ComplexNumber(Math.pow(t.imaginary,e.real),0);case 1:return new Q.ComplexNumber(0,Math.pow(t.imaginary,e.real));case 2:return new Q.ComplexNumber(-Math.pow(t.imaginary,e.real),0);case 3:return new Q.ComplexNumber(0,-Math.pow(t.imaginary,e.real))}}const n=Math.atan2(t.imaginary,t.real),r=Q.logHypotenuse(t.real,t.imaginary),i=Math.exp(e.real*r-e.imaginary*n),o=e.imaginary*r+e.real*n;return new Q.ComplexNumber(i*Math.cos(o),i*Math.sin(o))},squareRoot:function(t){const e=new Q.ComplexNumber(0,0),n=Q.ComplexNumber.absolute(t);return t.real>=0?0===t.imaginary?e.real=Math.sqrt(t.real):e.real=Math.sqrt(2*(n+t.real))/2:e.real=Math.abs(t.imaginary)/Math.sqrt(2*(n-t.real)),t.real<=0?e.imaginary=Math.sqrt(2*(n-t.real))/2:e.imaginary=Math.abs(t.imaginary)/Math.sqrt(2*(n+t.real)),t.imaginary<0&&(e.imaginary*=-1),e},log:function(t){return new Q.ComplexNumber(Q.logHypotenuse(t.real,t.imaginary),Math.atan2(t.imaginary,t.real))},multiply:function(t,e){return Q.ComplexNumber.operate("multiply",t,e,function(t,e){return new Q.ComplexNumber(t*e)},function(t,e){return new Q.ComplexNumber(t*e.real,t*e.imaginary)},function(t,e){return new Q.ComplexNumber(t.real*e,t.imaginary*e)},function(t,e){const n=t.real*e.real,r=t.real*e.imaginary,i=t.imaginary*e.real,o=t.imaginary*e.imaginary*-1;return new Q.ComplexNumber(n+o,r+i)})},divide:function(t,e){return Q.ComplexNumber.operate("multiply",t,e,function(t,e){return new Q.ComplexNumber(t/e)},function(t,e){return new Q.ComplexNumber(t).divide(e)},function(t,e){return new Q.ComplexNumber(t.real/e,t.imaginary/e)},function(t,e){const n=e.conjugate(),r=t.multiply(n),i=e.multiply(n).real;return r.divide(i)})},add:function(t,e){return Q.ComplexNumber.operate("add",t,e,function(t,e){return new Q.ComplexNumber(t+e)},function(t,e){return new Q.ComplexNumber(e.real+t,e.imaginary)},function(t,e){return new Q.ComplexNumber(t.real+e,t.imaginary)},function(t,e){return new Q.ComplexNumber(t.real+e.real,t.imaginary+e.imaginary)})},subtract:function(t,e){return Q.ComplexNumber.operate("subtract",t,e,function(t,e){return new Q.ComplexNumber(t+e)},function(t,e){return new Q.ComplexNumber(e.real-t,e.imaginary)},function(t,e){return new Q.ComplexNumber(t.real-e,t.imaginary)},function(t,e){return new Q.ComplexNumber(t.real-e.real,t.imaginary-e.imaginary)})}}),Q.ComplexNumber.createConstants("ZERO",new Q.ComplexNumber(0,0),"ONE",new Q.ComplexNumber(1,0),"E",new Q.ComplexNumber(Math.E,0),"PI",new Q.ComplexNumber(Math.PI,0),"I",new Q.ComplexNumber(0,1),"EPSILON",new Q.ComplexNumber(Q.EPSILON,Q.EPSILON),"INFINITY",new Q.ComplexNumber(1/0,1/0),"NAN",new Q.ComplexNumber(NaN,NaN)),Object.assign(Q.ComplexNumber.prototype,{clone:function(){return new Q.ComplexNumber(this.real,this.imaginary)},reduce:function(){return 0===this.imaginary?this.real:this},isNaN:function(t){return Q.ComplexNumber.isNaN(this)},isZero:function(t){return Q.ComplexNumber.isZero(this)},isFinite:function(t){return Q.ComplexNumber.isFinite(this)},isInfinite:function(t){return Q.ComplexNumber.isInfinite(this)},isEqualTo:function(t){return Q.ComplexNumber.areEqual(this,t)},absolute:function(){return Q.ComplexNumber.absolute(this)},conjugate:function(){return Q.ComplexNumber.conjugate(this)},power:function(t){return Q.ComplexNumber.power(this,t)},squareRoot:function(){return Q.ComplexNumber.squareRoot(this)},log:function(){return Q.ComplexNumber.log(this)},multiply:function(t){return Q.ComplexNumber.multiply(this,t)},divide:function(t){return Q.ComplexNumber.divide(this,t)},add:function(t){return Q.ComplexNumber.add(this,t)},subtract:function(t){return Q.ComplexNumber.subtract(this,t)},toText:function(t){"number"!=typeof t&&(t=16);const e=this.reduce(),n=Math.abs(e.imaginary);return Q.ComplexNumber.isNumberLike(e)?""+Q.round(e,t):0===e.real?1===e.imaginary?"i":-1===e.imaginary?"-i":e.imaginary.toFixed(t)+"i":e.real.toFixed(t)+" "+(e.imaginary>=0?"+":"-")+" "+(1===n?"i":Q.round(n,t)+"i")},copy$:function(t){return t instanceof Q.ComplexNumber!=!0?Q.error(`Q.ComplexNumber attempted to copy something that was not a complex number in to this complex number #${this.index}.`,this):(this.real=t.real,this.imaginary=t.imaginary,this)},conjugate$:function(){return this.copy$(this.conjugate())},power$:function(t){return this.copy$(this.power(t))},squareRoot$:function(){return this.copy$(this.squareRoot())},log$:function(){return this.copy$(this.log())},multiply$:function(t){return this.copy$(this.multiply(t))},divide$:function(t){return this.copy$(this.divide(t))},add$:function(t){return this.copy$(this.add(t))},subtract$:function(t){return this.copy$(this.subtract(t))}})},function(t,e){Q.Matrix=function(){this.index=Q.Matrix.index++;let t=null,e=!1;if(this.rows=Array.from(arguments),this.rows.forEach(function(n){n instanceof Array!=!0&&(n=[n]),null===t?t=n.length:t!==n.length&&(e=!0)}),e)return Q.error(`Q.Matrix found upon initialization that matrix#${this.index} row lengths were not equal. You are going to have a bad time.`,this);const n=this;this.columns=[];for(let e=0;e<t;e++){const t=[];for(let r=0;r<this.rows.length;r++){const i=n.rows[r][e];if("number"==typeof i)n.rows[r][e]=new Q.ComplexNumber(i);else if(i instanceof Q.ComplexNumber==!1)return Q.error(`Q.Matrix found upon initialization that matrix#${this.index} contained non-quantitative values. A+ for creativity, but F for functionality.`,this);Object.defineProperty(t,r,{get:function(){return n.rows[r][e]},set:function(t){n.rows[r][e]=t}})}this.columns.push(t)}},Object.assign(Q.Matrix,{index:0,help:function(){return Q.help(this)},constants:{},createConstant:Q.createConstant,createConstants:Q.createConstants,isMatrixLike:function(t){return t instanceof this||this.prototype.isPrototypeOf(t)},isWithinRange:function(t,e,n){return"number"==typeof t&&t>=e&&t<=n&&t==parseInt(t)},getWidth:function(t){return t.columns.length},getHeight:function(t){return t.rows.length},haveEqualDimensions:function(t,e){return t.rows.length===e.rows.length&&t.columns.length===e.columns.length},createSquare:function(t,e){"number"!=typeof t&&(t=2),"function"!=typeof e&&(e=function(){return 0});const n=[];for(let r=0;r<t;r++){const i=[];for(let n=0;n<t;n++)i.push(e(n,r));n.push(i)}return new Q.Matrix(...n)},createZero:function(t){return new Q.Matrix.createSquare(t)},createOne:function(t){return new Q.Matrix.createSquare(t,function(){return 1})},createIdentity:function(t){return new Q.Matrix.createSquare(t,function(t,e){return t===e?1:0})},from:function(t){"string"!=typeof t&&(t="Array"),t=t.toLowerCase();const e=Q.Matrix["from"+t];return"function"!=typeof e?Q.error(`Q.Matrix could not find an importer for “${t}” data.`):e()},fromArray:function(t){return new Q.Matrix(...t)},fromXsv:function(t,e,n){"string"!=typeof e&&(e="\n"),"string"!=typeof n&&(n="\t");const r=t.split(e),i=[];return r.forEach(function(t){if(""===(t=t.trim()))return;const e=[];t.split(n).forEach(function(t){e.push(parseFloat(t))}),i.push(e)}),new Q.Matrix(...i)},fromCsv:function(t){return Q.Matrix.fromXsv(t.replace(/\r/g,"\n"),"\n",",")},fromTsv:function(t){return Q.Matrix.fromXsv(t,"\n","\t")},fromHtml:function(t){return Q.Matrix.fromXsv(t.replace(/\r?\n|\r|<tr>|<td>/g,"").replace(/<\/td>(\s*)<\/tr>/g,"</tr>").match(/<table>(.*)<\/table>/i)[1],"</tr>","</td>")},add:function(t,e){return!0!==Q.Matrix.isMatrixLike(t)||!0!==Q.Matrix.isMatrixLike(e)?Q.error("Q.Matrix attempted to add something that was not a matrix."):!0!==Q.Matrix.haveEqualDimensions(t,e)?Q.error(`Q.Matrix cannot add matrix#${t.index} of dimensions ${t.columns.length}x${t.rows.length} to matrix#${e.index} of dimensions ${e.columns.length}x${e.rows.length}.`):new Q.Matrix(...t.rows.reduce(function(t,n,r){return t.push(n.reduce(function(t,n,i){return t.push(n.add(e.rows[r][i])),t},[])),t},[]))},multiplyScalar:function(t,e){return!0!==Q.Matrix.isMatrixLike(t)?Q.error("Q.Matrix attempted to scale something that was not a matrix."):"number"!=typeof e?Q.error(`Q.Matrix attempted to scale this matrix#${t.index} by an invalid scalar: ${e}.`):new Q.Matrix(...t.rows.reduce(function(t,n){return t.push(n.reduce(function(t,n){return t.push(n.multiply(e)),t},[])),t},[]))},multiply:function(t,e){if(!0!==Q.Matrix.isMatrixLike(t)||!0!==Q.Matrix.isMatrixLike(e))return Q.error("Q.Matrix attempted to multiply something that was not a matrix.");if(t.columns.length!==e.rows.length)return Q.error(`Q.Matrix attempted to multiply Matrix#${t.index}(cols==${t.columns.length}) by Matrix#${e.index}(rows==${e.rows.length}) but their dimensions were not compatible for this.`);const n=[];return t.rows.forEach(function(t){const r=[];e.columns.forEach(function(e){const n=new Q.ComplexNumber;e.forEach(function(e,r){n.add$(t[r].multiply(e))}),r.push(n)}),n.push(r)}),new this(...n)},multiplyTensor:function(t,e){if(!0!==Q.Matrix.isMatrixLike(t)||!0!==Q.Matrix.isMatrixLike(e))return Q.error("Q.Matrix attempted to tensor something that was not a matrix.");const n=[],r=t.columns.length*e.columns.length,i=t.rows.length*e.rows.length;for(let o=0;o<i;o++){const i=[];for(let n=0;n<r;n++){const r=Math.floor(n/t.columns.length),a=Math.floor(o/t.rows.length),u=n%e.columns.length,s=o%e.rows.length;i.push(t.rows[a][r].multiply(e.rows[s][u]))}n.push(i)}return new Q.Matrix(...n)}}),Object.assign(Q.Matrix.prototype,{isValidRow:function(t){return Q.Matrix.isWithinRange(t,0,this.rows.length-1)},isValidColumn:function(t){return Q.Matrix.isWithinRange(t,0,this.columns.length-1)},isValidAddress:function(t,e){return this.isValidRow(e)&&this.isValidColumn(t)},getWidth:function(){return Q.Matrix.getWidth(this)},getHeight:function(){return Q.Matrix.getHeight(this)},read:function(t,e){return this.isValidAddress(t,e)?this.rows[e][t]:Q.error(`Q.Matrix could not read from cell address (x=${t}, y=${e}) in matrix#${this.index}.`,this)},clone:function(){return new Q.Matrix(...this.rows)},toArray:function(){return this.rows},toXsv:function(t,e){return this.rows.reduce(function(n,r){return n+t+r.reduce(function(t,n,r){return t+(r>0?e:"")+n.toText()},"")},"")},toCsv:function(){return this.toXsv("\n",",")},toTsv:function(){return this.toXsv("\n","\t")},toHtml:function(){return this.rows.reduce(function(t,e){return t+e.reduce(function(t,e){return t+"\n\t\t<td>"+e.toText()+"</td>"},"\n\t<tr>")+"\n\t</tr>"},"\n<table>")+"\n</table>"},write$:function(t,e,n){return this.isValidAddress(t,e)?"number"!=typeof n?Q.error(`Attempted to write an invalid value (${n}) to matrix#${this.index} at x=${t}, y=${e}`,this):(this.rows[e][t]=n,this):Q.error(`Invalid cell address for Matrix#${this.index}: x=${t}, y=${e}`,this)},copy$:function(t){if(!0!==Q.Matrix.isMatrixLike(t))return Q.error(`Q.Matrix attempted to copy something that was not a matrix in to this matrix#${t.index}.`,this);if(!0!==Q.Matrix.haveEqualDimensions(t,this))return Q.error(`Q.Matrix cannot copy matrix#${t.index} of dimensions ${t.columns.length}x${t.rows.length} in to this matrix#${this.index} of dimensions ${this.columns.length}x${this.rows.length} because their dimensions do not match.`,this);const e=this;return t.rows.forEach(function(t,n){t.forEach(function(t,r){e.rows[n][r]=t})}),this},fromArray$:function(t){return this.copy$(Q.Matrix.fromArray(t))},fromCsv$:function(t){return this.copy$(Q.Matrix.fromCsv(t))},fromTsv$:function(t){return this.copy$(Q.Matrix.fromTsv(t))},fromHtml$:function(t){return this.copy$(Q.Matrix.fromHtml(t))},add:function(t){return Q.Matrix.add(this,t)},multiplyScalar:function(t){return Q.Matrix.multiplyScalar(this,t)},multiply:function(t){return Q.Matrix.multiply(this,t)},multiplyTensor:function(t){return Q.Matrix.multiplyTensor(this,t)},add$:function(t){return this.copy$(this.add(t))},multiplyScalar$:function(t){return this.copy$(this.multiplyScalar(t))}}),Q.Matrix.createConstants("IDENTITY_2X2",Q.Matrix.createIdentity(2),"IDENTITY_3X3",Q.Matrix.createIdentity(3),"IDENTITY_4X4",Q.Matrix.createIdentity(4),"CONSTANT0_2X2",new Q.Matrix([1,1],[0,0]),"CONSTANT1_2X2",new Q.Matrix([0,0],[1,1]),"NEGATION_2X2",new Q.Matrix([0,1],[1,0]),"TEST_MAP_9X9",new Q.Matrix([11,21,31,41,51,61,71,81,91],[12,22,32,42,52,62,72,82,92],[13,23,33,43,53,63,73,83,93],[14,24,34,44,54,64,74,84,94],[15,25,35,45,55,65,75,85,95],[16,26,36,46,56,66,76,86,96],[17,27,37,47,57,67,77,87,97],[18,28,38,48,58,68,78,88,98],[19,29,39,49,59,69,79,89,99]),"HADAMARD",new Q.Matrix([Math.SQRT1_2,Math.SQRT1_2],[Math.SQRT1_2,-Math.SQRT1_2]),"PAULI_X",new Q.Matrix([0,1],[1,0]),"PAULI_Y",new Q.Matrix([0,new Q.ComplexNumber(0,-1)],[new Q.ComplexNumber(0,1),0]),"PAULI_Z",new Q.Matrix([1,0],[0,-1]),"PHASE",new Q.Matrix([1,0],[0,new Q.ComplexNumber(0,1)]),"PI_8",new Q.Matrix([1,0],[0,Q.ComplexNumber.E.power(new Q.ComplexNumber(0,Math.PI/4))]),"CONTROLLED_NOT",new Q.Matrix([1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]),"SWAP",new Q.Matrix([1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]),"CONTROLLED_Z",new Q.Matrix([1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,-1]),"CONTROLLED_PHASE",new Q.Matrix([1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,new Q.ComplexNumber(0,1)]),"TOFFOLI",new Q.Matrix([1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0]),"CONTROLLED_SWAP",new Q.Matrix([1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1]))},function(t,e){Q.Qubit=function(t,e,n,r){if(Q.Matrix.isMatrixLike(t)&&void 0===e?(e=t.rows[1][0],t=t.rows[0][0]):("number"==typeof t&&(t=new Q.ComplexNumber(t,0)),"number"==typeof e&&(e=new Q.ComplexNumber(e,0)),t instanceof Q.ComplexNumber!=!0&&(t=new Q.ComplexNumber(1,0)),e instanceof Q.ComplexNumber!=!0&&(e=Q.ComplexNumber.ONE.subtract(Math.pow(t.absolute(),2)).squareRoot())),Math.pow(t.absolute(),2)+Math.pow(e.absolute(),2)-1>Q.EPSILON)return Q.error(`Q.Qubit could not accept the initialization values of a=${t} and b=${e} because their squares do not add up to 1.`);if(Q.Matrix.call(this,[t],[e]),this.index=Q.Qubit.index++,Object.defineProperty(this,"bra",{get:function(){return this.rows[0][0]},set:function(t){this.rows[0][0]=t}}),Object.defineProperty(this,"ket",{get:function(){return this.rows[1][0]},set:function(t){this.rows[1][0]=t}}),"string"==typeof n&&(this.label=n),"string"==typeof r&&(this.name=r),void 0===this.label||void 0===this.name){const n=Object.values(Q.Qubit.constants).find(function(n){return t.isEqualTo(n.bra)&&e.isEqualTo(n.ket)});void 0===n?(this.label="?",this.name="Unnamed"):(void 0===this.label&&(this.label=n.label),void 0===this.name&&(this.name=n.name))}},Q.Qubit.prototype=Object.create(Q.Matrix.prototype),Q.Qubit.prototype.constructor=Q.Qubit,Object.assign(Q.Qubit,{index:0,help:function(){return Q.help(this)},constants:{},createConstant:Q.createConstant,createConstants:Q.createConstants,findByKet:function(t){return t instanceof Q.ComplexNumber==!1&&(t=new Q.ComplexNumber(t)),Object.values(Q.Qubit.constants).find(function(e){return e.ket.isEqualTo(t)})},areEqual:function(t,e){return t.bra.isEqualTo(t.bra)&&e.ket.isEqualTo(e.ket)},collapse:function(t){const e=Math.pow(t.bra.absolute(),2),n=(Math.pow(t.ket.absolute(),2),Math.pow(2,32)-1),r=new Uint32Array(1);return window.crypto.getRandomValues(r),r/n<=e?new Q.Qubit(1,0):new Q.Qubit(0,1)},applyGate:function(t,e){return e instanceof Q.Gate==!1?Q.error(`Q.Qubit attempted to apply something that was not a gate to this qubit #${t.index}.`):e.applyTo(t)[0]},toText:function(t){return t.bra.toText()+"\n"+t.ket.toText()},toBlochSphere:function(t){const e=Q.ComplexNumber.arcCosine(t.bra).multiply(2);isNaN(e.real)&&(e.real=0),isNaN(e.imaginary)&&(e.imaginary=0);const n=Q.ComplexNumber.log(t.ket.divide(Q.ComplexNumber.sine(e.divide(2)))).divide(Q.ComplexNumber.I);isNaN(n.real)&&(n.real=0),isNaN(n.imaginary)&&(n.imaginary=0);const r={x:Q.ComplexNumber.sine(e).multiply(Q.ComplexNumber.cosine(n)).real,y:Q.ComplexNumber.sine(e).multiply(Q.ComplexNumber.sine(n)).real,z:Q.ComplexNumber.cosine(e).real},i={x:r.y,y:r.z,z:r.x};return{theta:e.real,phi:n.real,vector:r,position:i}},fromBlochVector:function(t,e,n){}}),Q.Qubit.createConstants("HORIZONTAL",new Q.Qubit(1,0,"H","Horizontal"),"VERTICAL",new Q.Qubit(0,1,"V","Vertical"),"DIAGONAL",new Q.Qubit(Math.SQRT1_2,Math.SQRT1_2,"D","Diagonal"),"ANTI_DIAGONAL",new Q.Qubit(Math.SQRT1_2,-Math.SQRT1_2,"A","Anti-diagonal"),"RIGHT_HAND_CIRCULAR_POLARIZED",new Q.Qubit(Math.SQRT1_2,new Q.ComplexNumber(0,-Math.SQRT1_2),"R","Right-hand Circular Polarized"),"LEFT_HAND_CIRCULAR_POLARIZED",new Q.Qubit(Math.SQRT1_2,new Q.ComplexNumber(0,Math.SQRT1_2),"L","Left-hand Circular Polarized")),Object.assign(Q.Qubit.prototype,{copy$:function(t){if(!0!==Q.Matrix.isMatrixLike(t))return Q.error(`Q.Qubit attempted to copy something that was not a matrix in this qubit #${qubit.index}.`,this);if(!0!==Q.Matrix.haveEqualDimensions(t,this))return Q.error(`Q.Qubit cannot copy matrix#${t.index} of dimensions ${t.columns.length}x${t.rows.length} in to this qubit #${this.index} of dimensions ${this.columns.length}x${this.rows.length} because their dimensions do not match.`,this);const e=this;return t.rows.forEach(function(t,n){t.forEach(function(t,r){e.rows[n][r]=t})}),this.dirac=t.dirac,this},clone:function(){return new Q.Qubit(this.bra,this.ket)},isEqualTo:function(t){return Q.Qubit.areEqual(this,t)},collapse:function(){return Q.Qubit.collapse(this)},applyGate:function(t){return Q.Qubit.applyGate(this,t)},toText:function(){return Q.Qubit.toText(this)},toBlochSphere:function(){return Q.Qubit.toBlochSphere(this)},collapse$:function(){return this.copy$(Q.Qubit.collapse(this))},applyGate$:function(t){return this.copy$(Q.Qubit.applyGate(this,t))}})},function(t,e){Q.Gate=function(t){Object.assign(this,t),this.index=Q.Gate.index++,"string"!=typeof this.name&&(this.name="Unknown"),"string"!=typeof this.label&&(this.label="?"),"number"!=typeof this.bandwidth&&(this.bandwidth=1),"function"!=typeof this.operation&&(this.operation=function(){return Array.from(arguments)});const e=this;this.applyTo=function(){let t=e.operation(...arguments);return t instanceof Array!=!0&&(t=[t]),t}},Object.assign(Q.Gate,{index:0,help:function(){return Q.help(this)},constants:{},createConstant:Q.createConstant,createConstants:Q.createConstants,findByLabel:function(t){return Object.values(Q.Gate.constants).find(function(e){return e.label.toUpperCase()===t.toUpperCase()})},findByName:function(t){return Object.values(Q.Gate.constants).find(function(t){return t.name.toUpperCase()===name.toUpperCase()})}}),Q.Gate.createConstants("IDENTITY",new Q.Gate({name:"Identity",label:"I"}),"MEASURE",new Q.Gate({name:"Measure",label:"M",operation:function(t){return t.collapse()}}),"HADAMARD",new Q.Gate({name:"Hadamard",label:"H",operation:function(t){return new Q.Qubit(Q.Matrix.HADAMARD.multiply(t))}}),"PAULI_X",new Q.Gate({name:"Pauli X",label:"X",operation:function(t){return new Q.Qubit(Q.Matrix.PAULI_X.multiply(t))}}),"PAULI_Y",new Q.Gate({name:"Pauli Y",label:"Y",operation:function(t){return new Q.Qubit(Q.Matrix.PAULI_Y.multiply(t))}}),"PAULI_Z",new Q.Gate({name:"Pauli Z",label:"Z",operation:function(t){return new Q.Qubit(Q.Matrix.PAULI_Z.multiply(t))}}),"PHASE",new Q.Gate({name:"Phase",label:"S",operation:function(t){return new Q.Qubit(Q.Matrix.PHASE.multiply(t))}}),"PI_8",new Q.Gate({name:"π ÷ 8",label:"T",operation:function(t){return new Q.Qubit(Q.Matrix.PI_8.multiply(t))}}),"CONTROLLED_NOT",new Q.Gate({name:"Controlled Not (C-Not)",label:"C",bandwidth:2,operation:function(t,e){const n=Q.Matrix.CONTROLLED_NOT.multiply(t.multiplyTensor(e));return[new Q.Qubit(n.rows[0][0],n.rows[1][0]),new Q.Qubit(n.rows[2][0],n.rows[3][0])]}})),Object.assign(Q.Gate.prototype,{clone:function(){return new Q.Gate(this.applyTo,this.label,this.name)},toText:function(){return`-${this.label}-`},toDiagram:function(){},toHtml:function(){return`<div class="gate">${this.label}</div>`}})},function(t,e){Q.Circuit=function(t,e){this.index=Q.Circuit.index++,"number"!=typeof t&&(t=3),this.bandwidth=t,"number"!=typeof e&&(e=5),this.timewidth=e,this.inputs=new Array(t).fill(Q.Qubit.HORIZONTAL),this.moments=new Array(e).fill(0).map(function(e,n){const r=new Array(t).fill(0).map(function(t,e){return{gate:Q.Gate.IDENTITY,qubitIndices:[e]}});return r.momentIndex=n,r}),this.results=[]},Object.assign(Q.Circuit,{index:0,help:function(){return Q.help(this)},constants:{},createConstant:Q.createConstant,createConstants:Q.createConstants,fromText:function(t){void 0!==t.raw&&(t=""+t.raw);const e=t.split("\n").reduce(function(t,e){const n=e.trim();return n.length&&t.push(n.toUpperCase().split(/\W+/)),t},[]),n=e.length,r=e[0].length;e.forEach(function(t,e){if(t.length!==r)return Q.error("Q.Circuit attempted to create a new circuit from text input but the amount of time implied in the submitted text is not consistent.")});const i=new Q.Circuit(n,r);return e.forEach(function(t,e){t.forEach(function(t,n){const r=new Q.Gate.findByLabel(t);if(r instanceof Q.Gate!=!0)return Q.error(`Q.Circuit attempted to create a new circuit from text input but could not identify this submitted gate: ${t}.`);i.add$(n+1,r,[e])})}),i},copy:function(){},cut:function(){},paste:function(){},getMoment:function(){return{to:function(t){}}}}),Object.assign(Q.Circuit.prototype,{add$:function(t,e,n){const r=this;if(--t<0||t>this.moments.length-1)return Q.error(`Q.Circuit attempted to add a gate to circuit #${this.index} at a moment index that is not valid:`,t);const i=this.moments[t];if(e instanceof Q.Gate!=!0)return Q.error(`Q.Circuit attempted to add a gate to circuit #${this.index} at moment #${t} that is not a gate:`,e);if(n instanceof Array!=!0)return Q.error(`Q.Circuit attempted to add a gate to circuit #${this.index} at moment #${t} with an invalid qubit indices array:`,n);if(0===n.length)return Q.error(`Q.Circuit attempted to add a gate to circuit #${this.index} at moment #${t} with an empty input qubit array:`,n);if(n.length!==e.bandwidth)return Q.error(`Q.Circuit attempted to add a gate to circuit #${this.index} at moment #${t} but the number of qubit indices (${n}) did not match the gate’s bandwidth (${e.bandwidth}).`);if(n.reduce(function(t,e){return t&&e>=0&&e<r.bandwidth},!1))return Q.error(`Q.Circuit attempted to add a gate to circuit #${this.index} at moment #${t} with some out of range qubit indices:`,n);let o=0;for(;o>=0;)(o=i.findIndex(function(t,e){return t.qubitIndices.some(function(t){return n.includes(t)})}))>=0&&i.splice(o,1);i.push({gate:e,qubitIndices:n})},remove$:function(){return this},run$:function(t){const e=[];void 0===t&&(t=1);for(let n=0;n<t;n++){const t=this.inputs.slice();this.moments.forEach(function(e){e.forEach(function(e){e.gate.applyTo(...e.qubitIndices.reduce(function(e,n){return e.push(t[n]),e},[])).forEach(function(n,r){t[e.qubitIndices[r]]=n})})}),e.push(t.map(function(t){return t.ket.real}))}const n=e.reduce(function(t,e,n){return e.forEach(function(e,n){t[n]+=e}),t},new Array(this.bandwidth).fill(0)).map(function(e){return e/t});return this.results=n,this},toText:function(){const t=this,e=new Array(this.bandwidth).fill("");return this.moments.forEach(function(n,r){t.inputs.forEach(function(t,i){let o="";r>0&&(o+="-"),o+=n.find(function(t){return t.qubitIndices.includes(i)}).gate.label,e[i]+=o})}),e.join("\n")},toDiagram:function(){const t=this,e=new Array(3*this.bandwidth+1).fill("");return e[0]="\n    t0  ",t.inputs.forEach(function(t,n){const r=3*n;e[r+1]+="        ",e[r+2]+="q"+n+"  |"+t.ket.toText()+"⟩─",e[r+3]+="        "}),this.moments.forEach(function(n,r){e[0]+=" t"+(r+1)+"  ",t.inputs.forEach(function(i,o){const a=n.find(function(t){return t.qubitIndices.includes(o)}).gate.label;let u="",s="",c="";"I"===a?(u+="   ",s+="──○",c+="   ",r<t.moments.length-1&&(u+="  ",s+="──",c+="  ")):(u+="┌───┐",s+="┤ "+a+" ",c+="└───┘",r<t.moments.length-1?s+="├":s+="│");const l=3*o;e[l+1]+=u,e[l+2]+=s,e[l+3]+=c})}),e.join("\n")},toDom:function(){document.createElement("div").classList.add("circuit")}})}]);